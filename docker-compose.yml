version: "3.8"
services:
  node-auth-server:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    depends_on:
      - auth-db-pg
      - rabbitmq
    env_file:
      - ./apps/auth/.env
    ports:
      - "7060:7060"
          
    # volumes:
    #   - ./:/app
    #   - /app/node_modules
    # env_file:
    #   - ./.env

  node-resource-server:
    build:
      context: .
      dockerfile: ./apps/resource/Dockerfile
    ports:
      - 7071:7071
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
  auth-db-pg:
    restart: always
    image: postgres:14
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=authuser
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=test-auth
    # volumes:
    #   # When the PostgresSQL container is started it will run any scripts
    #   # provided in the `docker-entrypoint-initdb.d` directory, this connects
    #   # our seed file to that directory so that it gets run
    #   - ./database-seed.sql:/docker-entrypoint-initdb.d/database-seed.sql
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "test@example.com"
      PGADMIN_DEFAULT_PASSWORD: "123321"
    ports:
      - "16543:80"
    depends_on:
      - auth-db-pg

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      
